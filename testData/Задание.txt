Введение
В прилагаемом файле config.json находится json-конфиг, в котором описывается контент лэндингов и его сегментация на одном сайте. 
Он представляет собой древовидную структуру, в каждой ноде которой находится описание различных параметров лэндинга, относящихся к данной ноде (поле parameters). 
Также в ноде находится описание сегментации пользователей - в зависимости от значений свойств самого пользователя (далее дименшнов) пользователям показывается различный контент за счёт того, что параметры принимают разные значения. 
В файле dimensions.json описаны существующие дименшны и их типы данных (их всего два, enum и boolean).

Логика фильтрации работает следующим образом. 
В самом объекте каждой ноды содержится поле rules, представляющее собой массив правил, которые содержат в себе поля filters и parameters. Правило считается подходящим для пользователя, если среди описанных в нём дименшнов хотя бы в одном элементе массива filters (дименшны являются ключами объекта в массиве filters) их реальные значения у пользователя попадают в массив, соответствующий дименшну. Например, если написано filters: [{ menu_type: ['fit', 'super_fit'] }], а у пользователя текущий menu_type равен balance, то правило не подходит, а если fit, то подходит. То есть, каждый элемент массива filters представляет некий сегмент пользователей, описанный несколькими фильтрами. Внутри сегмента фильтры работают по логике "И". Сегменты между собой (то есть элементы массива filters) работают по логике "ИЛИ".

Таким образом, логика определения актуального значения для параметра следующая: чтобы определить актуальное для пользователя значение параметра, нужно среди всех содержащих его правил взять первое подходящее.

Задание
Требуется сделать простой интерфейс, в котором можно будет "переключать" текущие значения дименшнов пользователя и получать актуальные значения параметров.

Пункт 1 - для переключения дименшнов нужно отобразить дропдаун или чекбокс для каждого дименшна в зависимости от его типа. По умолчанию нужно выбрать первое значение для enum и false для boolean.

Пункт 2 - необходимо вывести само дерево в графическом виде (использовать готовую реализацию для визуализации деревьев или сделать что-то своё), так чтобы в самой визуализации использовалось поле name нод в качестве названия. При клике на ноду нужно показывать попап, в котором в виде таблицы описывать актуальные параметры ноды (для выбранных димешнов, разумеется).

Пункт 3 - организовать скачивание json-ов и работу с ответом нужно так, как будто бы это настоящее боевое приложение. Сохранять данные дерева нужно в store с использованием vuex. Также, нужно сделать так, чтобы при обновлении страницы в браузере, дерево сразу показывалось, а затем обновлялось после повторного скачивания конфига. Нужно использовать mapActions, чтобы запустить скачивание из компонента, mapGetters для отображения дерева в компоненте, а также правильно мутировать стор и т.п.

Пункт 4 - отображение значение параметров нужно обработать в зависимости от типа. Например, если значение является ссылкой на изображение, отображать его миниатюру. Если ссылка на файл, ссылка "скачать [название файла]". Если цвет в формате hex, то квадратик с самим цветом. Если значение является массивом, тоже как-то графически это отобразить.

Плюсом будет уверенное использование библиотеки lodash или аналогов.